# The name of the workflow
name: frontend-deploy

# Triggers for the workflow
on:
  # Manually trigger the workflow
  workflow_dispatch:

  # Automatic trigger when push on the main branch and only when frontend code changes
  push:
    branches:
      - main
    paths:
      - starter/frontend/**

env:
  REPOSITORY: frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  Lint:
    # Use latest version of Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Check out code from repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Set up a Node.js with version 18
      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      # Cache the dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      # Install the dependencies
      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      # Run ESLint
      - name: ESLint
        run: |
          cd starter/frontend
          npm run lint

  Test:
    # Use latest version of Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Check out code from repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Set up a Node.js with version 18
      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      # Cache the dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      # Install the dependencies
      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      # Run application tests
      - name: Tests
        run: |
          cd starter/frontend
          npm test

  Build:
    # Check that both Lint and Test jobs completed successfully
    needs: [Lint, Test]

    # Use latest version of Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Check out code from repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Login to the AWS ECR repository
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build the application with Docker and push it to the AWS ECR repository
      - name: Docker build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd starter/frontend
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{ vars.BACKEND_API_URL }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  Deploy:
    # Check that the build job completed successfully
    needs: [Build]

    # Use latest version of Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Check out code from repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Login to the AWS ECR repository
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      # Update kubeconfig for the cluster
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.AWS_EKS_CLUSTER }}

      # Set image for Kustomize
      - name: Set Kustomize image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Deploy application to the cluster
      - name: Deploy to AWS ECR
        run: |
          cd starter/frontend/k8s
          kustomize build | kubectl apply -f -